//--------------------------------------------------------------------------------------------------
// File : asdxMesh.h
// Desc : Mesh Module.
// Copyright(c) Project Asura. All right reserved.
//--------------------------------------------------------------------------------------------------

#ifndef __ASDX_MESH_H__
#define __ASDX_MESH_H__

//--------------------------------------------------------------------------------------------------
// Includes
//--------------------------------------------------------------------------------------------------
#include <asdxTypedef.h>
#include <asdxMath.h>
#include <asdxGeometry.h>
#include <asdxRef.h>
#include <asdxTexture.h>
#include <asdxResMesh.h>
#include <vector>
#include <d3d11.h>


namespace asdx {

////////////////////////////////////////////////////////////////////////////////////////////////////
// Mesh class
////////////////////////////////////////////////////////////////////////////////////////////////////
class Mesh
{
    //==============================================================================================
    // list of friend classes and methods.
    //==============================================================================================
    /* NOTHING */

public:
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // ELEMENT_USAGE enum
    ///////////////////////////////////////////////////////////////////////////////////////////////
    enum ELEMENT_USAGE
    {
        ELEMENT_USAGE_POSITION  = 0,
        ELEMENT_USAGE_TEXCOORD,
        ELEMENT_USAGE_NORMAL,
        ELEMENT_USAGE_TANGENT,
        ELEMENT_USAGE_BONEINDEX,
        ELEMENT_USAGE_BONEWEIGHT,
    };

    //==============================================================================================
    // public variables.
    //==============================================================================================
    static const u32                        InputElementCount = 6;
    static const D3D11_INPUT_ELEMENT_DESC   InputElements[ InputElementCount ];

    //==============================================================================================
    // public methods.
    //==============================================================================================

    //----------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //----------------------------------------------------------------------------------------------
    Mesh();

    //----------------------------------------------------------------------------------------------
    //! @brief      コピーコンストラクタです.
    //!
    //! @param[in]      value       コピー元の値です.
    //----------------------------------------------------------------------------------------------
    Mesh( const Mesh& value );

    //----------------------------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //----------------------------------------------------------------------------------------------
    virtual ~Mesh();

    //----------------------------------------------------------------------------------------------
    //! @brief      リソースデータから生成します.
    //!
    //! @param [in]     pDevice         デバイスです.
    //! @param [in]     pDeviceContext  デバイスコンテキストです.
    //! @param [in]     mesh            リソースデータです.
    //! @retval true    生成に成功.
    //! @retval false   生成に失敗.
    //----------------------------------------------------------------------------------------------
    bool Create( ID3D11Device* pDevice, ID3D11DeviceContext* pDeviceContext, ResMesh& mesh );

    //----------------------------------------------------------------------------------------------
    //! @brief      解放処理を行います.
    //----------------------------------------------------------------------------------------------
    void Release();

    //----------------------------------------------------------------------------------------------
    //! @brief      サブセット数を取得します.
    //!
    //! @return     サブセット数を返却します.
    //----------------------------------------------------------------------------------------------
    u32  GetSubsetCount() const;

    //----------------------------------------------------------------------------------------------
    //! @brief      マテリアル数を取得します.
    //!
    //! @return     マテリアル数を返却します.
    //----------------------------------------------------------------------------------------------
    u32  GetMaterialCount() const;

    //----------------------------------------------------------------------------------------------
    //! @brief      テクスチャ数を取得します.
    //!
    //! @return     テクスチャ数を返却します.
    //----------------------------------------------------------------------------------------------
    u32  GetTextureCount() const;

    //----------------------------------------------------------------------------------------------
    //! @brief      サブセットデータを取得します.
    //!
    //! @param[in]      index       取得するデータの番号.
    //! @return     指定されたサブセットデータを返却します.
    //----------------------------------------------------------------------------------------------
    const ResSubset& GetSubset( const u32 index ) const;

    //----------------------------------------------------------------------------------------------
    //! @brief      マテリアルデータを取得します.
    //!
    //! @param[in]      index       取得するデータの番号.
    //! @return     指定されたマテリアルデータを返却します.
    //----------------------------------------------------------------------------------------------
    const ResMaterial& GetMaterial( const u32 index ) const;

    //----------------------------------------------------------------------------------------------
    //! @brief      テクスチャデータを取得します.
    //!
    //! @param[in]      index       取得するデータの番号.
    //! @return     指定されたテクスチャデータを返却します.
    //----------------------------------------------------------------------------------------------
    const Texture2D& GetTexture( const u32 index ) const;

    //----------------------------------------------------------------------------------------------
    //! @brief      バウンディングボックスを取得します.
    //!
    //! @return     バウンディングボックスを返却します.
    //----------------------------------------------------------------------------------------------
    const BoundingBox& GetBoundingBox() const;

    //----------------------------------------------------------------------------------------------
    //! @brief      バウンディングスフィアを取得します.
    //!
    //! @return     バウンディングスフィアを返却します.
    //----------------------------------------------------------------------------------------------
    const BoundingSphere& GetBoundingSphere() const;

    //----------------------------------------------------------------------------------------------
    //! @brief      入力要素を取得します.
    //!
    //! @return     入力要素を返却します.
    //! @note       定数InputElementsの中から該当するものだけが含まれた形で返却されます.
    //----------------------------------------------------------------------------------------------
    const std::vector<D3D11_INPUT_ELEMENT_DESC>& GetInputElements() const;

    //---------------------------------------------------------------------------------------------
    //! @brief      指定された要素を持つかどうかチェックします.
    //!
    //! @retval true    指定された要素を保持しています.
    //! @retval false   指定された要素は保持していません.
    //---------------------------------------------------------------------------------------------
    bool HasElement( ELEMENT_USAGE usage ) const;

    //---------------------------------------------------------------------------------------------
    //! @brief      指定された入力要素のインデックスを取得します.
    //!
    //! @return     指定された入力要素のインデックスを返却します.
    //!             指定された入力要素が存在しない場合は -1 が返却されます.
    //---------------------------------------------------------------------------------------------
    s32  GetInputElementIndex( ELEMENT_USAGE usage ) const;

    //----------------------------------------------------------------------------------------------
    //! @brief      サブセットを描画します.
    //!
    //! @param[in]      pDeviceContext      デバイスコンテキストです.
    //! @param[in]      index               描画するサブセット番号です.
    //----------------------------------------------------------------------------------------------
    void DrawSubset( ID3D11DeviceContext* pDeviceContext, const u32 index );

    //----------------------------------------------------------------------------------------------
    //! @brief      描画します.
    //!
    //! @param[in]      pDeviceContext      デバイスコンテキストです.
    //----------------------------------------------------------------------------------------------
    void Draw( ID3D11DeviceContext* pDeviceContext );

    //----------------------------------------------------------------------------------------------
    //! @brief      代入演算子です.
    //!
    //! @param[in]      value           代入する値です.
    //! @return     代入結果を返却します.
    //----------------------------------------------------------------------------------------------
    Mesh& operator = ( const Mesh& value );

protected:
    //==============================================================================================
    // protected variables.
    //==============================================================================================
    RefPtr<ID3D11Buffer>          m_pVB_Position;
    RefPtr<ID3D11Buffer>          m_pVB_TexCoord;
    RefPtr<ID3D11Buffer>          m_pVB_Normal;
    RefPtr<ID3D11Buffer>          m_pVB_Tangent;
    RefPtr<ID3D11Buffer>          m_pVB_BoneIndex;
    RefPtr<ID3D11Buffer>          m_pVB_BoneWeight;
    RefPtr<ID3D11Buffer>          m_pIB;
    RefPtr<ID3D11Buffer>          m_pMB;            //!< マテリアルバッファです.
    std::vector<ResSubset>        m_Subsets;        //!< サブセットです.
    std::vector<ResMaterial>      m_Materials;      //!< マテリアルです.
    std::vector<Texture2D>        m_Textures;       //!< テクスチャです.
    BoundingBox                   m_Box;            //!< バウンディングボックスです.
    BoundingSphere                m_Sphere;         //!< バウンディングスフィアです.

    //==============================================================================================
    // protected methods.
    //==============================================================================================

    //----------------------------------------------------------------------------------------------
    //! @brief      頂点バッファ生成時の処理です.
    //----------------------------------------------------------------------------------------------
    virtual bool OnBuildVertexBuffer( ID3D11Device* pDevice, ResMesh& mesh );

    //----------------------------------------------------------------------------------------------
    //! @brief      インデックスバッファ生成時の処理です.
    //----------------------------------------------------------------------------------------------
    virtual bool OnBuildIndexBuffer( ID3D11Device* pDevice, ResMesh& mesh );

    //----------------------------------------------------------------------------------------------
    //! @brief      マテリアルバッファ生成時の処理です.
    //----------------------------------------------------------------------------------------------
    virtual bool OnBuildMaterialBuffer( ID3D11Device* pDevice, ResMesh& mesh );

    //----------------------------------------------------------------------------------------------
    //! @brief      テクスチャ生成時の処理です.
    //----------------------------------------------------------------------------------------------
    virtual void OnBuildTexture( ID3D11Device* pDevice, ID3D11DeviceContext* pDeviceContext, ResMesh& mesh );

    //----------------------------------------------------------------------------------------------
    //! @brief      サブセット生成時の処理です.
    //----------------------------------------------------------------------------------------------
    virtual void OnBuildSubset( ResMesh& mesh );

    //----------------------------------------------------------------------------------------------
    //! @brief      マテリアル生成時の処理です.
    //----------------------------------------------------------------------------------------------
    virtual void OnBuildMaterial( ResMesh& mesh );

    //----------------------------------------------------------------------------------------------
    //! @brief      描画時の処理です.
    //----------------------------------------------------------------------------------------------
    virtual void OnDraw( ID3D11DeviceContext* pDeviceContext );

    //----------------------------------------------------------------------------------------------
    //! @brief      サブセット描画時の処理です.
    //----------------------------------------------------------------------------------------------
    virtual void OnDrawSubset( ID3D11DeviceContext* pDeviceContext, u32 index );

    //----------------------------------------------------------------------------------------------
    //! @brief      入力要素を生成します.
    //----------------------------------------------------------------------------------------------
    void BuildInputElementDesc( ResMesh& mesh );

    //----------------------------------------------------------------------------------------------
    //! @brief      頂点バッファを生成します.
    //----------------------------------------------------------------------------------------------
    bool BuildVertexBuffer( ID3D11Device* pDevice, ResMesh& mesh );

    //----------------------------------------------------------------------------------------------
    //! @brief      インデックスバッファを生成します.
    //----------------------------------------------------------------------------------------------
    bool BuildIndexBuffer( ID3D11Device* pDevice, ResMesh& mesh );

    //----------------------------------------------------------------------------------------------
    //! @brief      マテリアルバッファを生成します.
    //----------------------------------------------------------------------------------------------
    bool BuildMaterialBuffer( ID3D11Device* pDevice, ResMesh& mesh );

    //----------------------------------------------------------------------------------------------
    //! @brief      テクスチャを生成します.
    //----------------------------------------------------------------------------------------------
    void BuildTexture( ID3D11Device* pDevice, ID3D11DeviceContext* pDeviceContext, ResMesh& mesh );

    //----------------------------------------------------------------------------------------------
    //! @brief      サブセットを生成します.
    //----------------------------------------------------------------------------------------------
    void BuildSubset( ResMesh& mesh );

    //----------------------------------------------------------------------------------------------
    //! @brief      マテリアルを生成します.
    //----------------------------------------------------------------------------------------------
    void BuildMaterial( ResMesh& mesh );

    //----------------------------------------------------------------------------------------------
    //! @brief      描画処理です.
    //----------------------------------------------------------------------------------------------
    void ProcessDraw( ID3D11DeviceContext* pDeviceContext );

    //----------------------------------------------------------------------------------------------
    //! @brief      サブセット描画処理です.
    //----------------------------------------------------------------------------------------------
    void ProcessDrawSubset( ID3D11DeviceContext* pDeviceContext, u32 index );


private:
    //==============================================================================================
    // private variables.
    //==============================================================================================
    std::vector<D3D11_INPUT_ELEMENT_DESC> m_InputElements;

    //==============================================================================================
    // private methods.
    //==============================================================================================
    /* NOTHING */
};

} // namespace asdx

#endif//__ASDX_MESH_H__
