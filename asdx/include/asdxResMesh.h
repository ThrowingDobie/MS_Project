//-------------------------------------------------------------------------------------------------
// File : asdxResMesh.h
// Desc : Resource Mesh Module.
// Copyright(c) Project Asura. All right reserved.
//-------------------------------------------------------------------------------------------------

#ifndef __ASDX_RES_MESH_H__
#define __ASDX_RES_MESH_H__

//-------------------------------------------------------------------------------------------------
// Includes
//-------------------------------------------------------------------------------------------------
#include <asdxTypedef.h>
#include <asdxMath.h>
#include <vector>


namespace asdx {

///////////////////////////////////////////////////////////////////////////////////////////////////
// TEXTURE_USAGE enum
///////////////////////////////////////////////////////////////////////////////////////////////////
enum TEXTURE_USAGE
{
    TEXTURE_USAGE_DIFFUSE = 0,  //!< ディフューズマップとして使用します.
    TEXTURE_USAGE_SPECULAR,     //!< スペキュラーマップとして使用します.
    TEXTURE_USAGE_EMISSIVE,     //!< エミッシブマップとして使用します.
    TEXTURE_USAGE_BUMP,         //!< バンプマップとして使用します.
    TEXTURE_USAGE_GLOSS,        //!< グロスマップとして使用します.
    TEXTURE_USAGE_AMBIENT,      //!< アンビエントマップとして使用します.

    TEXTURE_USAGE_BASECOLOR,    //!< ベースカラーとして使用します.
    TEXTURE_USAGE_ROUGHNESS,    //!< ラフネスマップとして使用します.
    TEXTURE_USAGE_METALLIC,     //!< メタリックマップとして使用します.
    TEXTURE_USAGE_CABITY,       //!< キャビティマップとして使用します.
};


////////////////////////////////////////////////////////////////////////////////////////////////////
// Material structure
////////////////////////////////////////////////////////////////////////////////////////////////////
struct ASDX_ALIGN(16) Material
{
    asdx::Vector3A  Ambient;        //!< 環境光成分です.
    asdx::Vector3   Diffuse;        //!< 拡散反射成分です.
    f32             Alpha;          //!< 透過度です.
    asdx::Vector3   Specular;       //!< 鏡面反射成分です.
    f32             Power;          //!< 鏡面反射強度です.
    asdx::Vector3A  Emissive;       //!< 自己照明成分です.

    //----------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //----------------------------------------------------------------------------------------------
    Material()
    : Ambient   ( 0.0f, 0.0f, 0.0f )
    , Diffuse   ( 0.0f, 0.0f, 0.0f )
    , Alpha     ( 1.0f )
    , Specular  ( 0.0f, 0.0f, 0.0f )
    , Power     ( 1.0f )
    , Emissive  ( 0.0f, 0.0f, 0.0f )
    { /* DO_NOTHING */ }
};


////////////////////////////////////////////////////////////////////////////////////////////////////
// ResMaterial structure
////////////////////////////////////////////////////////////////////////////////////////////////////
struct ResMaterial
{
    Material   Param;            //!< マテリアルパラメータです.
    u32        DiffuseMap;       //!< ディフューズマップの番号です.
    u32        SpecularMap;      //!< スペキュラーマップの番号です.
    u32        EmissiveMap;      //!< エミッシブマップの番号です.
    u32        BumpMap;          //!< バンプマップの番号です.
    u32        GlossMap;         //!< グロスマップの番号です.
    u32        AmbientMap;       //!< アンビエントマップの番号です.

    //----------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //----------------------------------------------------------------------------------------------
    ResMaterial()
    : Param      ()
    , DiffuseMap ( U32_MAX )
    , SpecularMap( U32_MAX )
    , EmissiveMap( U32_MAX )
    , BumpMap    ( U32_MAX )
    , GlossMap   ( U32_MAX )
    , AmbientMap ( U32_MAX )
    { /* DO_NOTHING */ }
};

///////////////////////////////////////////////////////////////////////////////////////////////////
// PbrMaterial structure
///////////////////////////////////////////////////////////////////////////////////////////////////
struct ASDX_ALIGN(16) PbrMaterial
{
    asdx::Vector3   BaseColor;          //!< 基本色.
    f32             Opacity;            //!< 不透明度(1.0で不透明, 0.0で透明)
    f32             Roughness;          //!< 粗さ.
    f32             Metallic;           //!< 金属度.
    f32             Specular;           //!< スペキュラー.
    f32             Refraction;         //!< 屈折.
    asdx::Vector3   Emissive;           //!< 自己照明.
    f32             AmbientOcclusion;   //!< アンビエントオクル―ジョン.

    //---------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------------------
    PbrMaterial()
    : BaseColor ( 0.0f, 0.0f, 0.0f )
    , Opacity   ( 1.0f )
    , Roughness ( 0.0f )
    , Metallic  ( 0.0f )
    , Specular  ( 0.5f )
    , Refraction( 1.0f )
    , Emissive  ( 0.0f, 0.0f, 0.0f )
    { /* DO_NOTHING */ }
};

///////////////////////////////////////////////////////////////////////////////////////////////////
// ResPbrMaterial structure
///////////////////////////////////////////////////////////////////////////////////////////////////
struct ResPbrMaterial
{
    PbrMaterial Param;           //!< マテリアルパラメータです.
    u32         BaseColorMap;    //!< ディフューズマップの番号です.
    u32         RoughnessMap;    //!< ラフネスマップの番号です.
    u32         MetallicMap;     //!< メタリックマップの番号です.
    u32         SpecularMap;     //!< スペキュラーマップの番号です.
    u32         EmissiveMap;     //!< エミッシブマップの番号です.
    u32         BumpMap;         //!< バンプマップの番号です.

    //---------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------------------
    ResPbrMaterial()
    : Param        ()
    , BaseColorMap ( U32_MAX )
    , RoughnessMap ( U32_MAX )
    , MetallicMap  ( U32_MAX )
    , SpecularMap  ( U32_MAX )
    , EmissiveMap  ( U32_MAX )
    , BumpMap      ( U32_MAX )
    { /* DO_NOTHING */ }
};


///////////////////////////////////////////////////////////////////////////////////////////////////
// Subset structure
///////////////////////////////////////////////////////////////////////////////////////////////////
struct ResSubset
{
    u32     Offset;         //!< オフセットです.
    u32     Count;          //!< 描画する頂点数です.
    u32     MaterialID;     //!< マテリアル番号です.

    //---------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------------------
    ResSubset()
    : Offset    ( 0 )
    , Count     ( 0 )
    , MaterialID( U32_MAX )
    { /* DO_NOTHING */ }
};


///////////////////////////////////////////////////////////////////////////////////////////////////
// ResTexxtureInfo structure
///////////////////////////////////////////////////////////////////////////////////////////////////
struct ResTextureInfo
{
    u32     Usage;              //!< 使用用途です.
    char16  FilePath[ 260 ];    //!< ファイルパスです.

    //---------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------------------
    ResTextureInfo()
    : Usage     ( U32_MAX )
    { /* DO_NOTHING */ }
};


///////////////////////////////////////////////////////////////////////////////////////////////////
// ResBone structure
///////////////////////////////////////////////////////////////////////////////////////////////////
struct ResBone
{
    u32                     Id;             //!< IDです.
    u32                     ParentId;       //!< 親ボーンのIDです.
    asdx::Matrix            BindPose;       //!< バインドポーズ行列.
    asdx::Matrix            InvBindPose;    //!< バインドポーズ逆行列.

    //---------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------------------
    ResBone()
    : Id            ( U32_MAX )
    , ParentId      ( U32_MAX )
    , BindPose      ( asdx::Matrix::Identity() )
    , InvBindPose   ( asdx::Matrix::Identity() )
    { /* DO_NOTHING */ }
};


///////////////////////////////////////////////////////////////////////////////////////////////////
// ResMesh structure
///////////////////////////////////////////////////////////////////////////////////////////////////
struct ResMesh
{
    std::vector<Vector3>         Positions;      //!< 位置データです.
    std::vector<Vector2>         TexCoords;      //!< テクスチャ座標です.
    std::vector<Vector3>         Normals;        //!< 法線ベクトルです.
    std::vector<Vector3>         Tangents;       //!< 接線ベクトルです.
    std::vector<int4>            BoneIndices;    //!< ボーンの番号です.
    std::vector<Vector4>         BoneWeights;    //!< ボーンの重みです.
    std::vector<u32>             VertexIndices;  //!< 頂点インデックスです.
    std::vector<ResMaterial>     Materials;      //!< マテリアルデータです.
    std::vector<ResPbrMaterial>  PbrMaterials;   //!< PBRマテリアルデータです.
    std::vector<ResSubset>       Subsets;        //!< サブセットデータです.
    std::vector<ResTextureInfo>  Textures;       //!< テクスチャファイル名です.
    std::vector<ResBone>         Bones;          //!< ボーンです.

    //---------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------------------
    ResMesh();

    //---------------------------------------------------------------------------------------------
    //! @brief      コピーコンストラクタです.
    //!
    //! @param[in]      value           コピー元の値です.
    //---------------------------------------------------------------------------------------------
    ResMesh( const ResMesh& value );

    //---------------------------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //---------------------------------------------------------------------------------------------
    virtual ~ResMesh();

    //---------------------------------------------------------------------------------------------
    //! @brief      メモリを解放します.
    //---------------------------------------------------------------------------------------------
    void Release();

    //---------------------------------------------------------------------------------------------
    //! @brief      最適化を行います.
    //---------------------------------------------------------------------------------------------
    void Optimize();

    //---------------------------------------------------------------------------------------------
    //! @brief      ファイルから読み込みを行います.
    //!
    //! @param[in]      filename        ファイル名です.
    //! @retval true    読み込みに成功.
    //! @retval false   読み込みに失敗.
    //---------------------------------------------------------------------------------------------
    bool LoadFromFile( const char16* filename );

    //---------------------------------------------------------------------------------------------
    //! @brief      ファイルへ保存します.
    //!
    //! @param[in]      filename        ファイル名です.
    //! @retval true    保存に成功.
    //! @retval fase    保存に失敗.
    //---------------------------------------------------------------------------------------------
    bool SaveToFile( const char16* filename );

    //---------------------------------------------------------------------------------------------
    //! @brief      代入演算子です.
    //!
    //! @param[in]      value       代入する値です.
    //! @return     代入結果を返却します.
    //---------------------------------------------------------------------------------------------
    ResMesh& operator = ( const ResMesh& value );
};


}// namespace asdx

#endif//__ASDX_RES_MESH_H__
