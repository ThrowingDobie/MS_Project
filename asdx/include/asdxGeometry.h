//-------------------------------------------------------------------------------------------------
// File : asdxGeometry.h
// Desc : Geometry Module.
// Copyright(c) Project Asura. All right reserved.
//-------------------------------------------------------------------------------------------------

#ifndef __ASDX_GEOMETRY_H__
#define __ASDX_GEOMETRY_H__

//-------------------------------------------------------------------------------------------------
// Includes
//-------------------------------------------------------------------------------------------------
#include <asdxTypedef.h>
#include <asdxMath.h>
#include <array>


namespace asdx {

//-------------------------------------------------------------------------------------------------
// Forward Declarations
//-------------------------------------------------------------------------------------------------
struct Plane;
struct BoundingBox;
struct BoundingSphere;
class  Frustum;


///////////////////////////////////////////////////////////////////////////////////////////////////
// Plane structure
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Plane
{
    Vector3 n;      //!< 法線ベクトルです.
    f32     d;      //!< 原点からの距離です.

    //---------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------------------
    Plane();

    //---------------------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //!
    //! @param[in]      pValues     要素数4の配列.
    //---------------------------------------------------------------------------------------------
    Plane( const f32* pValues );

    //---------------------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //!
    //! @param[in]      a           法線ベクトルのX成分です.
    //! @param[in]      b           法線ベクトルのY成分です.
    //! @param[in]      c           法線ベクトルのZ成分です.
    //---------------------------------------------------------------------------------------------
    Plane( const f32 a, const f32 b, const f32 c, const f32 d );

    //---------------------------------------------------------------------------------------------
    //! @brief      f32*型へのキャストです.
    //---------------------------------------------------------------------------------------------
    operator f32* ();

    //---------------------------------------------------------------------------------------------
    //! @brief      const f32*型へのキャストです.
    //---------------------------------------------------------------------------------------------
    operator const f32* () const;

    //---------------------------------------------------------------------------------------------
    //! @brief      乗算代入演算子です.
    //---------------------------------------------------------------------------------------------
    Plane& operator *= ( const f32 value );

    //---------------------------------------------------------------------------------------------
    //! @brief      除算代入演算子です.
    //---------------------------------------------------------------------------------------------
    Plane& operator /= ( const f32 value );

    //---------------------------------------------------------------------------------------------
    //! @brief      正符号演算子です.
    //---------------------------------------------------------------------------------------------
    Plane operator + () const;

    //---------------------------------------------------------------------------------------------
    //! @brief      負符号演算子です.
    //---------------------------------------------------------------------------------------------
    Plane operator - () const;

    //---------------------------------------------------------------------------------------------
    //! @brief      乗算演算子です.
    //---------------------------------------------------------------------------------------------
    Plane operator * ( const f32 value ) const;

    //---------------------------------------------------------------------------------------------
    //! @brief      除算演算子です.
    //---------------------------------------------------------------------------------------------
    Plane operator / ( const f32 value ) const;

    //---------------------------------------------------------------------------------------------
    //! @brief      等価比較演算子です.
    //---------------------------------------------------------------------------------------------
    bool operator == ( const Plane& value ) const;

    //---------------------------------------------------------------------------------------------
    //! @brief      非等価比較演算子です.
    //---------------------------------------------------------------------------------------------
    bool operator != ( const Plane& value ) const;

    //---------------------------------------------------------------------------------------------
    //! @brief      乗算演算子です.
    //---------------------------------------------------------------------------------------------
    friend Plane operator * ( f32 value, const Plane& plane );

    //---------------------------------------------------------------------------------------------
    //! @brief      正規化します.
    //---------------------------------------------------------------------------------------------
    Plane& Normalize();

    //---------------------------------------------------------------------------------------------
    //! @brief      ゼロ除算を考慮して正規化します.
    //---------------------------------------------------------------------------------------------
    Plane& SafeNormalize( const Plane& value );

    //---------------------------------------------------------------------------------------------
    //! @brief      内積を求めます.
    //! @note       (ax + by + cz + dw)を計算します.
    //!
    //! @param[in]      value       4次元ベクトルです.
    //! @return     内積の計算結果を返却します.
    //---------------------------------------------------------------------------------------------
    f32  Dot( const Vector4& value ) const;

    //---------------------------------------------------------------------------------------------
    //! @brief      内積を求めます.
    //! @note       (ax + by + cz + d)を計算します.
    //!
    //! @param[in]      value       3次元ベクトルです.
    //! @return     内積の計算結果を返却します.
    //---------------------------------------------------------------------------------------------
    f32   DotCoord( const Vector3& value ) const;

    //---------------------------------------------------------------------------------------------
    //! @brief      法線ベクトルの内積を求めます.
    //! @note       (ax + by + cz)を計算します.
    //!
    //! @param[in]      value       3次元ベクトルです.
    //! @return     内積の計算結果を返却します.
    //---------------------------------------------------------------------------------------------
    f32   DotNormal( const Vector3& value ) const;

    //---------------------------------------------------------------------------------------------
    //! @brief      点が平面より内側であるか判定します.
    //!
    //! @param[in]      point       判定する点.
    //! @return     点が平面より内側であればtrueを返却します.
    //---------------------------------------------------------------------------------------------
    bool  Inside( const Vector3& point ) const;

    //---------------------------------------------------------------------------------------------
    //! @brief      バウンディングスフィアが平面より内側であるか判定します.
    //!
    //! @param[in]      sphere      判定する球.
    //! @return     球が平面より内側であればtrueを返却します.
    //---------------------------------------------------------------------------------------------
    bool  Inside( const BoundingSphere& sphere ) const;

    //---------------------------------------------------------------------------------------------
    //! @brief      3点から平面を生成します.
    //!
    //! @param[in]      v0      点0.
    //! @param[in]      v1      点1.
    //! @param[in]      v2      点2.
    //! @return     3点から生成した平面を返却します.
    //---------------------------------------------------------------------------------------------
    static Plane CreateFromPoints( const Vector3& v0, const Vector3& v1, const Vector3& v2 );

    //---------------------------------------------------------------------------------------------
    //! @brief      3点から平面を生成します.
    //!
    //! @param[in]      v0      点0.
    //! @param[in]      v1      点1.
    //! @param[in]      v2      点2.
    //! @param[out]     result  3点から生成した平面.
    //---------------------------------------------------------------------------------------------
    static void  CreateFromPoints( const Vector3& v0, const Vector3& v1, const Vector3& v2, Plane& result );

    //---------------------------------------------------------------------------------------------
    //! @brief      点と法線ベクトルから平面を生成します.
    //!
    //! @param[in]      p       点.
    //! @param[in]      n       法線ベクトル.
    //! @return     点と法線ベクトルから生成した平面を返却します.
    //---------------------------------------------------------------------------------------------
    static Plane CreateFromPointNormal( const Vector3& p, const Vector3& n );

    //---------------------------------------------------------------------------------------------
    //! @brief      点と法線ベクトルから平面を生成します.
    //!
    //! @param[in]      p       点.
    //! @param[in]      n       法線ベクトル.
    //! @param[out]     result  点と法線ベクトルから生成した平面を返却します.
    //---------------------------------------------------------------------------------------------
    static void  CreateFromPointNormal( const Vector3& p, const Vector3& n, Plane& result );
};


///////////////////////////////////////////////////////////////////////////////////////////////////
// BoundingBox structure
///////////////////////////////////////////////////////////////////////////////////////////////////
struct BoundingBox
{
    asdx::Vector3   mini;       //!< 最小値です.
    asdx::Vector3   maxi;       //!< 最大値です.

    //---------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------------------
    BoundingBox();

    //---------------------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //!
    //! @param[in]      _mini       最小値です.
    //! @param[in]      _maxi       最大値です.
    //---------------------------------------------------------------------------------------------
    BoundingBox( const asdx::Vector3& _mini, const asdx::Vector3& _maxi );

    //---------------------------------------------------------------------------------------------
    //! @brief      コピーコンストラクタです.
    //!
    //! @param[in]      value       コピー元の値です.
    //---------------------------------------------------------------------------------------------
    BoundingBox( const BoundingBox& value );

    //---------------------------------------------------------------------------------------------
    //! @brief      中心座標を取得します.
    //!
    //! @return     中心座標を返却します.
    //---------------------------------------------------------------------------------------------
    Vector3 GetCenter() const;

    //---------------------------------------------------------------------------------------------
    //! @brief      8角の頂点を取得します.
    //!
    //! @return     8角の頂点を返却します.
    //---------------------------------------------------------------------------------------------
    std::array<Vector3, 8>  GetCorners() const;

    //---------------------------------------------------------------------------------------------
    //! @brief      マージします.
    //!
    //! @param[in]      value       マージする点.
    //---------------------------------------------------------------------------------------------
    void Merge( const asdx::Vector3& value );

    //---------------------------------------------------------------------------------------------
    //! @brief      マージします.
    //!
    //! @param[in]      a           マージするバウンディングボックス.
    //! @param[in]      b           マージするバウンディングボックス.
    //! @return     2つのバウンディングボックスをマージした結果を返却します.
    //---------------------------------------------------------------------------------------------
    static BoundingBox Merge( const BoundingBox& a, const BoundingBox& b );
};


///////////////////////////////////////////////////////////////////////////////////////////////////
// BoundingSpherer structure
///////////////////////////////////////////////////////////////////////////////////////////////////
struct BoundingSphere
{
    asdx::Vector3   center;     //!< 中心座標です.
    f32             radius;     //!< 半径です.

    //---------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------------------
    BoundingSphere();

    //---------------------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //!
    //! @param[in]      _center     中心座標です.
    //! @param[in]      _radius     半径です.
    //---------------------------------------------------------------------------------------------
    BoundingSphere( const asdx::Vector3& _center, const f32 _radius );

    //---------------------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //!
    //! @param[in]      value       バウンディングボックスです.
    //---------------------------------------------------------------------------------------------
    BoundingSphere( const BoundingBox& value );

    //---------------------------------------------------------------------------------------------
    //! @brief      コピーコンストラクタです.
    //!
    //! @param[in]      value       コピー元の値です.
    //---------------------------------------------------------------------------------------------
    BoundingSphere( const BoundingSphere& value );

    //---------------------------------------------------------------------------------------------
    //! @brief      マージします.
    //!
    //! @param[in]      a           マージするバウンディングスフィア.
    //! @param[in]      b           マージするバウンディングスフィア.
    //! @return     2つのバウンディングスフィアをマージした結果を返却します.
    //---------------------------------------------------------------------------------------------
    static BoundingSphere Merge( const BoundingSphere& a, const BoundingSphere& b );
};


///////////////////////////////////////////////////////////////////////////////////////////////////
// Frustum class
///////////////////////////////////////////////////////////////////////////////////////////////////
class Frustum
{
    //=============================================================================================
    // list of friend classes and method.
    //=============================================================================================
    /* NOTHING */

public:
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Side enum
    ///////////////////////////////////////////////////////////////////////////////////////////////
    enum Side
    {
        Near = 0,       //!< 近クリップ平面.
        Far,            //!< 遠クリップ平面.
        Top,            //!< 天井面.
        Right,          //!< 右側面.
        Bottom,         //!< 底面.
        Left,           //!< 左側面.
        NumPlanes,      //!< 平面の数.
    };

    //=============================================================================================
    // public variables.
    //=============================================================================================
    /* NOTHING */

    //=============================================================================================
    // public methods.
    //=============================================================================================

    //---------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------------------
    Frustum();

    //---------------------------------------------------------------------------------------------
    //! @brief      コピーコンストラクタです.
    //!
    //! @param[in]      value       コピー元の値です.
    //---------------------------------------------------------------------------------------------
    Frustum( const Frustum& value );

    //---------------------------------------------------------------------------------------------
    //! @brief      8角の頂点を取得します.
    //!
    //! @return     8角の頂点を返却します.
    //---------------------------------------------------------------------------------------------
    std::array<Vector3, 8> GetCorners() const;

    //---------------------------------------------------------------------------------------------
    //! @brief      点が含まれるかどうかチェックします.
    //!
    //! @param[in]      point       判定する点.
    //! @return     点が含まれる場合はtrueを返却します.
    //---------------------------------------------------------------------------------------------
    bool Contains( const Vector3& point ) const;

    //---------------------------------------------------------------------------------------------
    //! @brief      球が含まれるかどうかチェックします.
    //!
    //! @param[in]      value       判定する球.
    //! @return     球が含まれる場合はtrueを返却します.
    //---------------------------------------------------------------------------------------------
    bool Contains( const BoundingSphere& value ) const;

    //---------------------------------------------------------------------------------------------
    //! @brief      平面を取得します.
    //!
    //! @param[in]      value       取得する平面タイプ
    //! @return     指定された平面を返却します.
    //---------------------------------------------------------------------------------------------
    const Plane& GetPlane( Side value ) const;

    //---------------------------------------------------------------------------------------------
    //! @brief      代入演算子です.
    //!
    //! @param[in]      value       代入する値です.
    //! @return     代入結果を返却します.
    //---------------------------------------------------------------------------------------------
    Frustum& operator = ( const Frustum& value );

    //---------------------------------------------------------------------------------------------
    //! @brief      透視投影カメラパラメータから錐台を生成します.
    //!
    //! @param[in]      cameraPosition      カメラ位置です.
    //! @param[in]      cameraTarget        カメラの注視点です.
    //! @param[in]      cameraUpward        カメラ上向きベクトルです.
    //! @param[in]      fieldOfView         垂直画角です.
    //! @param[in]      aspectRatio         アスペクト比です.
    //! @param[in]      nearClip            近クリップ平面までの距離です.
    //! @param[in]      farClip             遠クリップ平面までの距離です.
    //! @return     透視投影カメラパラメータから作成した錐台を返却します.
    //---------------------------------------------------------------------------------------------
    static Frustum CreatePerspectiveFromLookAt( 
        const Vector3&  cameraPosition,
        const Vector3&  cameraTarget,
        const Vector3&  cameraUpaward,
        const f32       fieldOfView,
        const f32       aspectRatio,
        const f32       nearClip,
        const f32       farClip );

    //---------------------------------------------------------------------------------------------
    //! @brief      正射影カメラパラメータから錐台を生成します.
    //!
    //! @param[in]      cameraPosition      カメラ位置です.
    //! @param[in]      cameraTarget        カメラの注視点です.
    //! @param[in]      cameraUpward        カメラ上向きベクトルです.
    //! @param[in]      width               ビューボリュームの幅.
    //! @param[in]      height              ビューボリュームの高さ.
    //! @param[in]      nearClip            近クリップ平面までの距離です.
    //! @param[in]      farClip             遠クリップ平面までの距離です.
    //! @return     正射影カメラパラメータから作成した錐台を返却します.
    //---------------------------------------------------------------------------------------------
    static Frustum CreateOrthoFromLookAt(
        const Vector3&  cameraPosition,
        const Vector3&  cameraTarget,
        const Vector3&  cameraUpward,
        const f32       width,
        const f32       height,
        const f32       nearClip,
        const f32       farClip );

    //---------------------------------------------------------------------------------------------
    //! @brief      透視投影カメラパラメータから錐台を生成します.
    //!
    //! @param[in]      cameraPosition      カメラ位置です.
    //! @param[in]      cameraDirection     カメラの視線ベクトルです.
    //! @param[in]      cameraUpward        カメラ上向きベクトルです.
    //! @param[in]      fieldOfView         垂直画角です.
    //! @param[in]      aspectRatio         アスペクト比です.
    //! @param[in]      nearClip            近クリップ平面までの距離です.
    //! @param[in]      farClip             遠クリップ平面までの距離です.
    //! @return     透視投影カメラパラメータから作成した錐台を返却します.
    //---------------------------------------------------------------------------------------------
    static Frustum CreatePerspectiveFromLookTo( 
        const Vector3&  cameraPosition,
        const Vector3&  cameraDirection,
        const Vector3&  cameraUpaward,
        const f32       fieldOfView,
        const f32       aspectRatio,
        const f32       nearClip,
        const f32       farClip );

    //---------------------------------------------------------------------------------------------
    //! @brief      正射影カメラパラメータから錐台を生成します.
    //!
    //! @param[in]      cameraPosition      カメラ位置です.
    //! @param[in]      cameraDirection     カメラの視線ベクトルです.
    //! @param[in]      cameraUpward        カメラ上向きベクトルです.
    //! @param[in]      width               ビューボリュームの幅.
    //! @param[in]      height              ビューボリュームの高さ.
    //! @param[in]      nearClip            近クリップ平面までの距離です.
    //! @param[in]      farClip             遠クリップ平面までの距離です.
    //! @return     正射影カメラパラメータから作成した錐台を返却します.
    //---------------------------------------------------------------------------------------------
    static Frustum CreateOrthoFromLookTo( 
        const Vector3&  cameraPosition,
        const Vector3&  cameraDirection,
        const Vector3&  cameraUpaward,
        const f32       width,
        const f32       height,
        const f32       nearClip,
        const f32       farClip );

protected:
    //=============================================================================================
    // protected variables.
    //=============================================================================================
    Plane       m_Planes[ NumPlanes ];      //!< 平面です.
    Vector3     m_NearPoint[ 4 ];           //!< 近クリップ平面を構成する4点です.
    Vector3     m_FarPoint [ 4 ];           //!< 遠クリップ平面を構成する4点です.

    //=============================================================================================
    // protected methods.
    //=============================================================================================
    /* NOTHING */

private:
    //=============================================================================================
    // private variables.
    //=============================================================================================
    /* NOTHING */

    //=============================================================================================
    // private methods.
    //=============================================================================================
    /* NOTHING */
};


}// namespace asdx


//-------------------------------------------------------------------------------------------------
// Inline Files
//-------------------------------------------------------------------------------------------------
#include <asdxGeometry.inl>


#endif//__ASDX_GEOMETRY_H__
