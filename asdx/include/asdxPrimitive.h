//-------------------------------------------------------------------------------------------------
// File : asdxPrimitive.h
// Desc : Primitive Drawer Module.
// Copyright(c) Project Asura. All right reserved.
//-------------------------------------------------------------------------------------------------

#ifndef __ASDX_PRIMITIVE_H__
#define __ASDX_PRIMITIVE_H__

//-------------------------------------------------------------------------------------------------
// Includes
//-------------------------------------------------------------------------------------------------
#include <asdxTypedef.h>
#include <asdxMath.h>
#include <asdxRef.h>
#include <d3d11.h>


namespace asdx {

///////////////////////////////////////////////////////////////////////////////////////////////////
// Point class
///////////////////////////////////////////////////////////////////////////////////////////////////
class Point : private NonCopyable
{
    //=============================================================================================
    // list of friend classes and methods.
    //=============================================================================================
    /* NOTHING */

public:
    //=============================================================================================
    // public variables.
    //=============================================================================================
    /* NOTHING */

    //=============================================================================================
    // public methods.
    //=============================================================================================

    //---------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------------------
    Point();

    //---------------------------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //---------------------------------------------------------------------------------------------
    virtual ~Point();

    //---------------------------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //!
    //! @param[in]      pDevice     デバイスです.
    //! @retval true    初期化に成功.
    //! @retval false   初期化に失敗.
    //---------------------------------------------------------------------------------------------
    bool Init( ID3D11Device* pDevice );

    //---------------------------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //---------------------------------------------------------------------------------------------
    void Term();

    //---------------------------------------------------------------------------------------------
    //! @brief      描画開始処理を行います
    //!
    //! @param[in]      pDeviceContext      デバイスコンテキストです.
    //---------------------------------------------------------------------------------------------
    void Begin( ID3D11DeviceContext* pDeviceContext );

    //---------------------------------------------------------------------------------------------
    //! @brief      描画終了処理を行います.
    //!
    //! @param[in]      pDeviceContext      デバイスコンテキストです.
    //---------------------------------------------------------------------------------------------
    void End( ID3D11DeviceContext* pDeviceContext );

    //---------------------------------------------------------------------------------------------
    //! @brief      描画処理を行います.
    //!
    //! @param[in]      value           点です
    //---------------------------------------------------------------------------------------------
    void Draw( const Vector3& value );

    //---------------------------------------------------------------------------------------------
    //! @brief      線の色を設定します.
    //!
    //! @param[in]      value       設定する色です.
    //---------------------------------------------------------------------------------------------
    void SetColor( const Vector4& value );

    //---------------------------------------------------------------------------------------------
    //! @brief      スクリーンのサイズを設定します.
    //!
    //! @param[in]      value       設定するスクリーンサイズです.
    //---------------------------------------------------------------------------------------------
    void SetScreenSize( const Vector2& value );

    //---------------------------------------------------------------------------------------------
    //! @brief      点の大きさを設定します.
    //!
    //! @param[in]      value       設定する点の大きさです.
    //---------------------------------------------------------------------------------------------
    void SetPointSize( const f32 value );

    //---------------------------------------------------------------------------------------------
    //! @brief      ワールド行列を設定します.
    //!
    //! @param[in]      value       設定するワールド行列です.
    //---------------------------------------------------------------------------------------------
    void SetWorld( const Matrix& value );

    //---------------------------------------------------------------------------------------------
    //! @brief      ビュー行列を設定します.
    //!
    //! @param[in]      value       設定するビュー行列です.
    //---------------------------------------------------------------------------------------------
    void SetView( const Matrix& value );

    //---------------------------------------------------------------------------------------------
    //! @brief      射影行列を設定します.
    //!
    //! @param[in]      value       設定する射影行列です.
    //---------------------------------------------------------------------------------------------
    void SetProj( const Matrix& value );

protected:
    //=============================================================================================
    // protected variables.
    //=============================================================================================
    /* NOTHING */

    //=============================================================================================
    // protected methods.
    //=============================================================================================
    /* NOTHING */

private:
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // ControParam buffer
    ///////////////////////////////////////////////////////////////////////////////////////////////
    struct ASDX_ALIGN(16) ControlParam
    {
        Vector2     ScreenSize;         //!< スクリーンサイズです.
        f32         PointSize;          //!< 点の大きさです.
        f32         Dummy;              //!< アライメント用ダミーです.
        Vector4     Color;              //!< 点のカラーです.
    };

    //=============================================================================================
    // private variables.
    //=============================================================================================
    static const u32 BUFFER_SIZE = 128;
    RefPtr<ID3D11VertexShader>      m_VS;               //!< 頂点シェーダです.
    RefPtr<ID3D11GeometryShader>    m_GS;               //!< ジオメトリシェーダです.
    RefPtr<ID3D11PixelShader>       m_PS;               //!< ピクセルシェーダです.
    RefPtr<ID3D11InputLayout>       m_IL;               //!< 入力レイアウトです.
    RefPtr<ID3D11Buffer>            m_VB;               //!< 頂点バッファです.
    RefPtr<ID3D11Buffer>            m_IB;               //!< インデックスバッファです.
    RefPtr<ID3D11Buffer>            m_CBTransform;      //!< 定数バッファ(行列変換).
    RefPtr<ID3D11Buffer>            m_CBControl;        //!< 定数バッファ(点制御).
    u32                             m_PointCount;       //!< 点の数です.
    Vector3                         m_Buffer[ BUFFER_SIZE ];    //!< 頂点用固定バッファです.
    Matrix                          m_World;            //!< ワールド行列です.
    Matrix                          m_View;             //!< ビュー行列です.
    Matrix                          m_Proj;             //!< 射影行列です.
    ControlParam                    m_ControlParam;     //!< 制御パラメータです.

    //=============================================================================================
    // private methods.
    //=============================================================================================
    /* NOTHING */
};


///////////////////////////////////////////////////////////////////////////////////////////////////
// Line class
///////////////////////////////////////////////////////////////////////////////////////////////////
class Line : private NonCopyable
{
    //=============================================================================================
    // list of friend classes and methods.
    //=============================================================================================
    /* NOTHING */

public:
    //=============================================================================================
    // public variables.
    //=============================================================================================
    /* NOTHING */

    //=============================================================================================
    // public methods.
    //=============================================================================================

    //---------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------------------
    Line();

    //---------------------------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //---------------------------------------------------------------------------------------------
    virtual ~Line();

    //---------------------------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //!
    //! @param[in]      pDevice     デバイスです.
    //! @retval true    初期化に成功.
    //! @retval false   初期化に失敗.
    //---------------------------------------------------------------------------------------------
    bool Init( ID3D11Device* pDevice );

    //---------------------------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //---------------------------------------------------------------------------------------------
    void Term();

    //---------------------------------------------------------------------------------------------
    //! @brief      描画開始処理を行います.
    //!
    //! @param[in]      pDeviceContext      デバイスコンテキストです.
    //---------------------------------------------------------------------------------------------
    void Begin( ID3D11DeviceContext* pDeviceContext );

    //---------------------------------------------------------------------------------------------
    //! @brief      描画終了処理を行います.
    //!
    //! @param[in]      pDeviceContext      デバイスコンテキストです.
    //---------------------------------------------------------------------------------------------
    void End( ID3D11DeviceContext* pDeviceContext );

    //---------------------------------------------------------------------------------------------
    //! @brief      描画処理を行います.
    //!
    //! @param[in]      a           端点Aです
    //! @param[in]      b           端点Bです.
    //---------------------------------------------------------------------------------------------
    void Draw( const Vector3& a, const Vector3& b );

    //---------------------------------------------------------------------------------------------
    //! @brief      線の色を設定します.
    //!
    //! @param[in]      value       設定する色です.
    //---------------------------------------------------------------------------------------------
    void SetColor( const Vector4& value );

    //---------------------------------------------------------------------------------------------
    //! @brief      スクリーンのサイズを設定します.
    //!
    //! @param[in]      value       設定するスクリーンサイズです.
    //---------------------------------------------------------------------------------------------
    void SetScreenSize( const Vector2& value );

    //---------------------------------------------------------------------------------------------
    //! @brief      線幅を設定します.
    //!
    //! @param[in]      value       設定する線幅です.
    //---------------------------------------------------------------------------------------------
    void SetLineWidth( const f32 value );

    //---------------------------------------------------------------------------------------------
    //! @brief      ワールド行列を設定します.
    //!
    //! @param[in]      value       設定するワールド行列です.
    //---------------------------------------------------------------------------------------------
    void SetWorld( const Matrix& value );

    //---------------------------------------------------------------------------------------------
    //! @brief      ビュー行列を設定します.
    //!
    //! @param[in]      value       設定するビュー行列です.
    //---------------------------------------------------------------------------------------------
    void SetView( const Matrix& value );

    //---------------------------------------------------------------------------------------------
    //! @brief      射影行列を設定します.
    //!
    //! @param[in]      value       設定する射影行列です.
    //---------------------------------------------------------------------------------------------
    void SetProj( const Matrix& value );

protected:
    //=============================================================================================
    // protected variables.
    //=============================================================================================
    /* NOTHING */

    //=============================================================================================
    // protected methods.
    //=============================================================================================
    /* NOTHING */

private:
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // ControParam buffer
    ///////////////////////////////////////////////////////////////////////////////////////////////
    struct ASDX_ALIGN(16) ControlParam
    {
        Vector2     ScreenSize;     //!< スクリーンサイズです.
        f32         LineWidth;      //!< 線幅です.
        f32         Dummy;          //!< アライメント用ダミーです.
        Vector4     Color;          //!< ラインカラーです.
    };

    //=============================================================================================
    // private variables.
    //=============================================================================================
    static const u32    BUFFER_SIZE = 128;
    RefPtr<ID3D11VertexShader>      m_VS;               //!< 頂点シェーダです.
    RefPtr<ID3D11GeometryShader>    m_GS;               //!< ジオメトリシェーダです.
    RefPtr<ID3D11PixelShader>       m_PS;               //!< ピクセルシェーダです.
    RefPtr<ID3D11InputLayout>       m_IL;               //!< 入力レイアウトです.
    RefPtr<ID3D11Buffer>            m_VB;               //!< 頂点バッファです.
    RefPtr<ID3D11Buffer>            m_IB;               //!< インデックスバッファです.
    RefPtr<ID3D11Buffer>            m_CBTransform;      //!< 定数バッファです(行列変換).
    RefPtr<ID3D11Buffer>            m_CBControl;        //!< 定数バッファです(ライン制御).
    u32                             m_LineCount;        //!< 線の数です
    Vector3                         m_Buffer[ BUFFER_SIZE * 2 ];    //!< 頂点用固定バッファ
    Matrix                          m_World;            //!< ワールド行列です.
    Matrix                          m_View;             //!< ビュー行列です.
    Matrix                          m_Proj;             //!< 射影行列です.
    ControlParam                    m_ControlParam;     //!< 制御パラメータです.

    //=============================================================================================
    // private methods.
    //=============================================================================================
    /* NOTHING */
};


///////////////////////////////////////////////////////////////////////////////////////////////////
// Quad class
///////////////////////////////////////////////////////////////////////////////////////////////////
class Quad : private NonCopyable
{
    //=============================================================================================
    // list of friend classes and methods.
    //=============================================================================================
    /* NOTHING */

public:
    //=============================================================================================
    // public variables.
    //=============================================================================================
    /* DO_NOTHING */

    //=============================================================================================
    // public methods.
    //=============================================================================================

    //---------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------------------
    Quad();

    //---------------------------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //---------------------------------------------------------------------------------------------
    virtual ~Quad();

    //---------------------------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //!
    //! @param[in]      pDevice         デバイスです.
    //---------------------------------------------------------------------------------------------
    bool Init( ID3D11Device* pDevice );

    //---------------------------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //---------------------------------------------------------------------------------------------
    void Release();

    //---------------------------------------------------------------------------------------------
    //! @brief      描画処理を行います.
    //!
    //! @param[in]      pDeviceContext      デバイスコンテキストです.
    //---------------------------------------------------------------------------------------------
    void Draw( ID3D11DeviceContext* pDeviceContext );

protected:
    //=============================================================================================
    // protected variables.
    //=============================================================================================
    /* NOTHING */

    //=============================================================================================
    // protected methods.
    //=============================================================================================
    /* NOTHING */

private:
    //=============================================================================================
    // private variables.
    //=============================================================================================
    RefPtr<ID3D11Buffer>           m_pVB;      //!< 頂点バッファです.
    RefPtr<ID3D11InputLayout>      m_pIL;      //!< 入力レイアウトです ( float3 Position : POSITION, float2 TexCoord : TEXCOORD )

    //=============================================================================================
    // private methods.
    //=============================================================================================
    /* NOTHING */
};

} // namespace asdx



#endif//__ASDX_LINE_H__
