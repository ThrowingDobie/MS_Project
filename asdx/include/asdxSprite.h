//-------------------------------------------------------------------------------------------------
// File : asdxSprite.h
// Desc : Sprite Module.
// Copyright(c) Project Asura. All right reserved.
//-------------------------------------------------------------------------------------------------

#ifndef __ASDX_SPRITE_H__
#define __ASDX_SPRITE_H__

//-------------------------------------------------------------------------------------------------
// Includes
//-------------------------------------------------------------------------------------------------
#include <asdxTypedef.h>
#include <asdxMath.h>
#include <asdxRef.h>
#include <d3d11.h>


namespace asdx {

///////////////////////////////////////////////////////////////////////////////////////////////////
// Sprite class
///////////////////////////////////////////////////////////////////////////////////////////////////
class Sprite : private NonCopyable
{
    //=============================================================================================
    // list of friend classed and methods.
    //=============================================================================================
    /* NOTHING */

public:
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // SHADER_TYPE enum
    ///////////////////////////////////////////////////////////////////////////////////////////////
    enum SHADER_TYPE
    {
        SHADER_TYPE_NONE = 0,           //!< シェーダを設定しません.
        SHADER_TYPE_COLOR,              //!< 頂点カラーのみ
        SHADER_TYPE_TEXTURE2D,          //!< 2次元テクスチャ使用.
        SHADER_TYPE_TEXTURE2DARRAY,     //!< 2次元テクスチャ配列使用.
        SHADER_TYPE_TEXTURECUBE,        //!< キューブマップ使用
        SHADER_TYPE_TEXTURE3D,          //!< 3次元テクスチャ使用
    };

    //=============================================================================================
    // public variables.
    //=============================================================================================
    /* NOTHING */

    //=============================================================================================
    // public methods.
    //=============================================================================================

    //---------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------------------
    Sprite();

    //---------------------------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //---------------------------------------------------------------------------------------------
    virtual ~Sprite();

    //---------------------------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //!
    //! @param[in]      pDevice         デバイスです.
    //! @param[in]      screenWidth     スクリーンの横幅です.
    //! @param[in]      screenHeight    スクリーンの縦幅です.
    //! @retval true    初期化に成功.
    //! @retval false   初期化に失敗.
    //---------------------------------------------------------------------------------------------
    bool Init( ID3D11Device* pDevice, f32 screenWidth, f32 screenHeight );

    //---------------------------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //---------------------------------------------------------------------------------------------
    void Term();

    //---------------------------------------------------------------------------------------------
    //! @brief      描画開始処理を行います.
    //!
    //! @param[in]      pDeviceContext      デバイスコンテキストです.
    //! @param[in]      shaderType          設定するシェーダのタイプです.
    //---------------------------------------------------------------------------------------------
    void Begin( ID3D11DeviceContext* pDeviceContext, Sprite::SHADER_TYPE shaderType = SHADER_TYPE_COLOR );

    //---------------------------------------------------------------------------------------------
    //! @brief      スプライトを描画します.
    //!
    //! @param[in]      x           描画開始位置Xです.
    //! @param[in]      y           描画開始位置Yです.
    //! @param[in]      w           スプライトの横幅です.
    //! @param[in]      h           スプライトの縦幅です.
    //---------------------------------------------------------------------------------------------
    void Draw( const s32 x, const s32 y, const s32 w, const s32 h );

    //---------------------------------------------------------------------------------------------
    //! @brief      スプライトを描画します.
    //!
    //! @param[in]      x           描画開始位置Xです.
    //! @param[in]      y           描画開始位置Yです.
    //! @param[in]      w           スプライトの横幅です.
    //! @param[in]      h           スプライトの縦幅です.
    //! @param[in]      uv0         左下のテクスチャ座標です.
    //! @param[in]      uv1         右上のテクスチャ座標です.
    //---------------------------------------------------------------------------------------------
    void Draw( const s32 x, const s32 y, const s32 w, const s32 h, const Vector2& uv0, const Vector2& uv1 );

    //---------------------------------------------------------------------------------------------
    //! @brief      スプライトを描画します.
    //!
    //! @param[in]      x           描画開始位置Xです.
    //! @param[in]      y           描画開始位置Yです.
    //! @param[in]      w           スプライトの横幅です.
    //! @param[in]      h           スプライトの縦幅です.
    //! @param[in]      layerDepth  深度レイヤーです.
    //---------------------------------------------------------------------------------------------
    void Draw( const s32 x, const s32 y, const s32 w, const s32 h, const s32 layerDepth );

    //---------------------------------------------------------------------------------------------
    //! @brief      スプライトを描画します.
    //!
    //! @param[in]      x           描画開始位置Xです.
    //! @param[in]      y           描画開始位置Yです.
    //! @param[in]      w           スプライトの横幅です.
    //! @param[in]      h           スプライトの縦幅です.
    //! @param[in]      uv0         左下のテクスチャ座標です.
    //! @param[in]      uv1         右上のテクスチャ座標です.
    //! @param[in]      layerDepth  深度レイヤーです.
    //---------------------------------------------------------------------------------------------
    void Draw( const s32 x, const s32 y, const s32 w, const s32 h, const Vector2& uv0, const Vector2& uv1, const s32 layerDepth );

    //---------------------------------------------------------------------------------------------
    //! @brief      描画終了処理を行います.
    //!
    //! @param[in]      pDeviceContext      デバイスコンテキストです.
    //---------------------------------------------------------------------------------------------
    void End( ID3D11DeviceContext* pDeviceContext );

    //---------------------------------------------------------------------------------------------
    //! @brief      スクリーンサイズを設定します.
    //!
    //! @param[in]      width       スクリーンの横幅です.
    //! @param[in]      height      スクリーンの縦幅です.
    //---------------------------------------------------------------------------------------------
    void SetScreenSize( f32 width, f32 height );

    //---------------------------------------------------------------------------------------------
    //! @brief      頂点カラーを設定します.
    //!
    //! @param[in]      r           R成分です.
    //! @param[in]      g           G成分です.
    //! @param[in]      b           B成分です.
    //! @param[in]      a           A成分です.
    //---------------------------------------------------------------------------------------------
    void SetColor( f32 r, f32 g, f32 b, f32 a );

    //---------------------------------------------------------------------------------------------
    //! @brief      サーフェイスインデックスを設定します.
    //!
    //! @param[in]      index       設定するサーフェイス番号.
    //---------------------------------------------------------------------------------------------
    void SetSurfaceIndex( s32 index );

    //---------------------------------------------------------------------------------------------
    //! @brief      テクスチャを設定します.
    //!
    //! @param[in]      pSRV        設定するシェーダリソースビュー.
    //! @param[in]      pSmp        設定するサンプラーステートです.
    //---------------------------------------------------------------------------------------------
    void SetTexture( ID3D11ShaderResourceView* pSRV, ID3D11SamplerState* pSmp );

    //---------------------------------------------------------------------------------------------
    //! @brief      スクリーンサイズを取得します.
    //!
    //! @return     設定されているスクリーンサイズを返却します.
    //---------------------------------------------------------------------------------------------
    asdx::Vector2 GetScreenSize() const;

    //---------------------------------------------------------------------------------------------
    //! @brief      頂点カラーを取得します.
    //!
    //! @return     設定されている頂点カラーを返却します.
    //---------------------------------------------------------------------------------------------
    asdx::Vector4 GetColor() const;

    //---------------------------------------------------------------------------------------------
    //! @brief      サーフェイスインデックスを取得します.
    //!
    //! @return     設定されているサーフェイス番号を取得します.
    //---------------------------------------------------------------------------------------------
    s32 GetSurfaceIndex() const;

    //---------------------------------------------------------------------------------------------
    //! @brief      シェーダリソースビューを取得します.
    //!
    //! @return     設定されているシェーダリソースビューを返却します.
    //---------------------------------------------------------------------------------------------
    ID3D11ShaderResourceView* GetSRV() const;

    //---------------------------------------------------------------------------------------------
    //! @brief      サンプラーステートを取得します.
    //!
    //! @return     設定されているサンプラーステートを返却します.
    //---------------------------------------------------------------------------------------------
    ID3D11SamplerState* GetSmp() const;

protected:
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Vertex structure
    ///////////////////////////////////////////////////////////////////////////////////////////////
    struct Vertex
    {
        asdx::Vector3 Position;     //!< 位置座標です.
        asdx::Vector4 Color;        //!< 頂点カラーです.
        asdx::Vector3 TexCoord;     //!< テクスチャ座標です.
    };

    //=============================================================================================
    // protectecd variables.
    //=============================================================================================
    static const size_t                     InputElementCount = 3;
    static const D3D11_INPUT_ELEMENT_DESC   InputElements[ InputElementCount ];

    static const size_t     NUM_SPRITES             = 128;
    static const size_t     NUM_VERTEX_PER_SPRITE   = 4;
    static const size_t     NUM_INDEX_PER_SPRITE    = 6;

    RefPtr<ID3D11VertexShader> m_pVS;
    RefPtr<ID3D11PixelShader>  m_pPSColor;
    RefPtr<ID3D11PixelShader>  m_pPSTex2D;
    RefPtr<ID3D11PixelShader>  m_pPSTex2DArray;
    RefPtr<ID3D11PixelShader>  m_pPSTexCube;
    RefPtr<ID3D11PixelShader>  m_pPSTex3D;
    RefPtr<ID3D11Buffer>       m_pVB;
    RefPtr<ID3D11Buffer>       m_pIB;
    RefPtr<ID3D11Buffer>       m_pCB;
    RefPtr<ID3D11InputLayout>  m_pIL;
    ID3D11ShaderResourceView*  m_pSRV;
    ID3D11SamplerState*        m_pSmp;

    u32             m_SpriteCount;
    s32             m_SurfaceIndex;
    asdx::Vector2   m_ScreenSize;
    asdx::Vector4   m_Color;
    asdx::Matrix    m_Transform;
    Vertex          m_Vertices[ NUM_SPRITES * NUM_VERTEX_PER_SPRITE ];

    //=============================================================================================
    // protected methods.
    //=============================================================================================
    /* NOTHING */

private:
    //=============================================================================================
    // private variables.
    //=============================================================================================
    /* NOTHING */

    //==============================================================================================
    // private methods.
    //==============================================================================================
    /* NOTHING */
};

} // namespace asdx

#endif//__ASDX_SPRITE_H__
